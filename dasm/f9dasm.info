FILE ../images/27256.bin 0x8000
OPTION noflex
DATA 0x8000-0x8002
CODE 0x8003-0x821F
DATA 0x8220-0x828B
CODE 0x828C-0x832F
DATA 0x8330-0x8397
CODE 0x8398-0x83AE
DATA 0x83AF-0x83DD
CODE 0x83DE-0x83EA
DATA 0x83EB-0x8429
CODE 0x842A-0x8481
DATA 0x8482-0x84B3
CODE 0x84B4-0x8536
DATA 0x8537-0x8560
CODE 0x8561-0x8564
DATA 0x8565-0x8570
CODE 0x8571-0x858B
DATA 0x858C-0x85C2
CODE 0x85C3-0x85D4
DATA 0x85D5-0x85E2
CODE 0x85E3-0x8740
DATA 0x8741-0x8759
CODE 0x875A-0x875F
DATA 0x8760-0x8E8E
CODE 0x8E8F-0x8EF0
DATA 0x8EF1-0x8EF3
CODE 0x8EF4-0x8F29
DATA 0x8F2A-0x900C
CODE 0x900D-0x90D3
DATA 0x90D4-0x9B77
CODE 0x9B78-0x9B8B
DATA 0x9B8C-0x9CE2
CODE 0x9CE3-0x9D65
DATA 0x9D66-0xB0C5
CODE 0xB0C6-0xB11C
DATA 0xB11D-0xB204
CODE 0xB205-0xB549
DATA 0xB54A-0xB54B
CODE 0xB54C-0xB6D7
DATA 0xB6D8-0xB6EF
CODE 0xB6F0-0xB966
DATA 0xB967-0xBAD9
CODE 0xBADA-0xBAF1
DATA 0xBAF2-0xBAFF
CODE 0xBB00-0xBB07
DATA 0xBB08-0xBB2D
CODE 0xBB2E-0xBB7F
DATA 0xBB80-0xBD5B
CODE 0xBD5C-0xBD6D
DATA 0xBD6E-0xC42A
CODE 0xC42B-0xC434
DATA 0xC435-0xC456
CODE 0xC457-0xC480
DATA 0xC481-0xC493
CODE 0xC494-0xC4AB
DATA 0xC4AC-0xC835
CODE 0xC836-0xC83F
DATA 0xC840-0xD06D
CODE 0xD06E-0xD15D
DATA 0xD15E-0xD1A7
CODE 0xD1A8-0xD1FD
DATA 0xD1FE-0xD245
CODE 0xD246-0xD27A
DATA 0xD27B-0xD294
CODE 0xD295-0xD2AA
DATA 0xD2AB-0xD2B4
CODE 0xD2B5-0xD3DD
DATA 0xD3DE-0xD5FA
CODE 0xD3FB-0xD682
DATA 0xD683-0xDB94
CODE 0xDB95-0xDC3F
DATA 0xDC40-0xDC40
CODE 0xDC41-0xDDF7
DATA 0xDDF8-0xFFEF


LABEL 0x1000 DACBASE
LABEL 0x1400 UARTBASE
LABEL 0x1406 UARTCSR
LABEL 0x1407 UARTDATA
LABEL 0x1600 PITBASE
LABEL 0x1800 PUSHBTN07
LABEL 0x1801 PUSHBTNMISC
LABEL 0x1D00 MISCBITS
LABEL 0x1D80 BANKSELECT
LABEL 0x1E00 LED7SEG1
LABEL 0x1E80 LED7SEG2
LABEL 0x1F00 LED7SEG3
LABEL 0x1F80 LEDSINGLES
LABEL 0x2000 PATCHROMSTART
LABEL 0x4000 EPROMSTART
LABEL 0x6000 RAMSTART 
LABEL 0x7222 LOOPCOUNTER
LABEL 0x7593 UARTRXD_START
LABEL 0x7792 UARTRXD_END
LABEL 0x7793 UARTTXD_START
LABEL 0x7992 UARTTXD_END
LABEL 0x7993 UARTRXD_RPTR * not definite but looks likely by initialisation
LABEL 0x7995 UARTRXD_WPTR
LABEL 0x7997 UARTTXD_RPTR
LABEL 0x7999 UARTTXD_WPTR * not definite but looks likely by initialisation 
LABEL 0x79F9 IRQHANDLERADDR
LABEL 0x7FFF STACKSTART
RMB 0xE1E7-0xFFF1
CVEC 0xFFF0-0xFFFF

LCOMMENT 0x800C disable interrupts
LCOMMENT 0x800E initialize stack location
COMMENT  0x8014 Next two writes appear to write to bit 7 of U703 and U704 respectively, which are n/c on p3 of original schematic?
COMMENT  0x801a assert SYNC1,MUTE, SYNC2 and WAVE

LABEL    0x803E DELAYLOOP_803E

LABEL    0x81E4 ZEROALLVCA1
COMMENT  0x81E4 Subroutine: ZEROALLVCA1 - Drive 0 to the VCA1 input of all voices
LCOMMENT 0x81E4 Iterate 50 times
DEC 0x81E5
LABEL    0x81EF LOOP_81EF
LCOMMENT 0x8200 decrement loop counter...
LCOMMENT 0x8203 ...and loop again

COMMENT  0x84B4 UART interrupt handler
LCOMMENT 0x84B4 Save X,A register values
LCOMMENT 0x84B6 Get the UART status into A
LCOMMENT 0x84B9 Is there RX data?
LCOMMENT 0x84BB If RX bit not set, jump
COMMENT  0x84BD Handle a received MIDI byte 
LCOMMENT 0x84BD A = received byte
LCOMMENT 0x84C0 get the write pointer...
LCOMMENT 0x84C3 ...and store the RX byte in the buffer
LCOMMENT 0x84C5 is the write ptr at end of buffer?
LCOMMENT 0x84C8 no, skip the ptr reset
LCOMMENT 0x84CA yes, set write ptr back to beginning of buffer
LCOMMENT 0x84D2 store the write ptr
LCOMMENT 0x84D5 has it caught up with the read ptr?

COMMENT  0x84D8 This conditional branch seems to do the same thing either way

LCOMMENT 0x84DA Restore X,A register values
LCOMMENT 0x84DC ... and return from interrupt

LCOMMENT 0x84DD Restore X,A register values
LCOMMENT 0x84DF ... and return from interrupt

LABEL    0x84E0 UART_TXINT

LCOMMENT 0x84F8 /16, 8N1, RX interrupts only
BIN      0x84F9
LCOMMENT 0x8502 Restore X,A register values
LCOMMENT 0x8504 ... and return from interrupt

LABEL    0x8505 INIT_UART
LCOMMENT 0x8505 UART master reset
BIN      0x8506
LCOMMENT 0x850A /16, 8N1, RX interrupts only
BIN      0x850B

COMMENT  0x8519 initialise the MIDI receive queue read and write pointers to the bottom of the buffer

COMMENT  0x85C3 On entry, X = new UART TXD write ptr?
LCOMMENT 0x85C3 inhibit UART interrupts
LCOMMENT 0x85C5 is X == current read ptr?
LCOMMENT 0x85C8 yes, abort
LCOMMENT 0x85CA save the write pointer
LCOMMENT 0x85CD /16, 8NQ, RX /and/ TX interrupts
BIN      0x85CE
LCOMMENT 0x85CF write the UART status
LCOMMENT 0x85D2 enable UART interrupts


LABEL    0x85E7 HANDLEIRQ


CONST 0xB271-0xB272 * incorrectly interpreted as address

CONST 0xD630-0xD631
END